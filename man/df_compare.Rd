% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/df_compare.R
\name{df_compare}
\alias{df_compare}
\alias{df_ndiff}
\alias{df_pdiff}
\title{Compare columns of two data frames}
\usage{
df_compare(dat1, dat2, fun, coltypes, ...)

df_ndiff(dat1, dat2, coltypes = c("integer", "numeric"), ...)

df_pdiff(dat1, dat2, coltypes = c("integer", "numeric"), percent = FALSE,
  ...)
}
\arguments{
\item{dat1}{a data.frame}

\item{dat2}{a data.frame that has the same number of rows, column names and column types as dat1}

\item{fun}{a comparison function ()}

\item{coltypes}{types of the columns of which to apply fun}

\item{...}{arguments passed on to fun}

\item{percent}{(only df_pdiff) If TRUE, return the difference in percent rather than as a fraction (so 10 instead of 0.1)}
}
\value{
a data.frame
}
\description{
Combines the columns indicated by \code{coltypes} using the function \code{fun}.
The design idea is to use it for comparing two data.frames, but it can be used
for other purposes as well, such as adding or multiplying numeric columns of
two similar data.frames (see examples)

\code{df_ndiff} subtracts dat2 from dat1 (only integer and numeric columns by default)

\code{df_pdiff} returns the fractional difference between dat1 and dat2.
The formula used is (dat1-dat2)/dat1.
}
\examples{

dat1 <- data.frame(
  a = c('alpha', 'beta', 'ceta'),
  b = c(10,-10, 90),
  c = c(1L, 3L, 5L),
  d = factor(c('al', 'dl', 'zl')),
  stringsAsFactors = FALSE
)

dat2 <- data.frame(
  a = c('alpha', 'beta', 'ceta'),
  b = c(10, 20, 100),
  c = c(2L, 1L, 0L),
  d = factor(c('bl', 'ul', 'dl')),
  stringsAsFactors = FALSE
)

df_ndiff(dat1, dat2)
df_pdiff(dat1, dat2)

# df_compare can be passed an arbitrary function
df_compare(dat1, dat2, `*`)
df_compare(dat1, dat2, fun = function(x, y) paste0(x, '/', y))
df_compare(dat1, dat2, fun = function(x, y) paste0(x, '/', y), coltypes = 'factor')
}

